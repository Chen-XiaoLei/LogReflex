EventId,EventTemplate,Occurrences
0,"printFreezingDisplayLogsopening app wtoken = AppWindowToken{<*> token=Token{<*> ActivityRecord{<*> u0 <*> t<*>}}}, allDrawn= false, startingDisplayed = false, startingMoved = false, isRelaunching = false",1
1,"acquire lock=<*>, flags=0x1, tag=""View Lock"", name=<*>, ws=null, uid=<*>, pid=<*>",1
2,"ready=<*>,policy=<*>,wakefulness=<*>,wksummary=<*>,uasummary=<*>,bootcompleted=<*>,boostinprogress=<*>,waitmodeenable=<*>,mode=<*>,manual=<*>,auto=<*>,adj=<*>userId=<*>",199
3,Skipping AppWindowToken{<*> token=Token{<*> ActivityRecord{<*> u0 <*> t<*>}}} -- going to hide,4
4,visible is <*>,5
5,mVisiblity.getValue is <*>,5
6,"release:lock=<*>, flg=<*>, tag=""<*>"", name=<*>, ws=null, uid=<*>, pid=<*>",17
7,"updateClipping isOverlap:<*>, getTopPadding=<*>, Translation=<*>",65
8,updateDimmedActivatedHideSensitive overlap:<*>,65
9,getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output,81
10,"release:lock=<*>, flg=0x<*>, tag=""<*>"", name=<*>, ws=WorkSource{<*>}, uid=<*>, pid=<*>",9
11,"setSystemUiVisibility vis=<*> mask=<*> oldVal=<*> newVal=<*> diff=<*> fullscreenStackVis=<*> dockedStackVis=<*> fullscreenStackBounds=Rect(<*>), dockedStackBounds=Rect(<*>)",200
12,cancelAutohide,15
13,"notifyUiVisibilityChanged:vis=<*>, SystemUiVisibility=<*>",19
14,Destroying surface Surface(name=<*>) called by <*>,25
15,"userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=0x<*>, uid=<*>",69
16,"orientation change is complete, call stopFreezingDisplayLocked",1
17,Screen frozen for +<*> due to Window{<*> u0 <*>},1
18,startAnimation begin,1
19,startAnimation end,1
20,remove(PendingIntent{<*>: PendingIntentRecord{<*> <*> broadcastIntent}}) changed bounds; rebatching,2
21,"rotationForOrientationLw(orient=<*>, last=<*>); user=<*> USER_ROTATION_LOCKED",3
22,"Application requested orientation <*>, got rotation <*> which has compatible metrics",3
23,"acquire lock=<*>, flags=0x1, tag=""RILJ_ACK_WL"", name=<*>, ws=null, uid=<*>, pid=<*>",10
24,shouldBlockLocation running ...,37
25,shouldBlockLocation ret:<*>,37
26,getNeighboringCellInfo calling app is <*>,5
27,"Releasing suspend blocker ""<*>"".",33
28,HBM brightnessIn =<*>,85
29,HBM brightnessOut =<*>,85
30,"Animating brightness: target=<*>, rate=<*>",85
31,suspendAutohide,23
32,interceptKeyTq keycode=<*> interactive=<*> keyguardActive=<*> policyFlags=<*> down <*> canceled <*>,14
33,"interceptKeyBeforeQueueing: key <*> , result : <*>",14
34,resumeSuspendedAutohide,10
35,querySoundEffectsEnabled...,17
36,"acquire lock=<*>, flags=0x<*>, tag=""<*>"", name=android, ws=<*>, uid=<*>, pid=<*>",10
37,"Acquiring suspend blocker ""<*>"".",33
38,Bad activity token: android.os.BinderProxy@<*>,1
39,java.lang.ClassCastException: <*> cannot be cast to <*>,1
40,"onTouchEvent::<*>, x=<*>, y=<*>",2
41,schedulePeek,1
42,getRingtonePlayer...,2
43,disable: < expand <*> home recent clock navigationbar search <*> >,6
44,"updateLightsLocked,mInCall =<*>,mScreenOn = <*>,ledNotification == null?<*>",6
45,"updateLightsLocked,turn off notificationLight",6
46,"overlapAmount:<*>, previousNotificationEnd:<*>, newYTranslation:<*>, location:<*>, i:<*>, getTopPadding:<*>, getLocationOnScreen():<*>",13
47,"state.clipTopAmount:<*>, i:<*>",13
48,onExpandingStarted,2
49,onTrackingStarted,1
50,cancelPeek: false,20
51,"flingToHeight: vel=<*>, expand=<*>, target=<*>, collapseSpeedUpFactor=<*>, expandBecauseOfFalsing=<*>",2
52,onTrackingStopped: <*>,1
53,onExpandingFinished,2
54,Sending non-protected broadcast <*> from system <*>:com.android.systemui<*> pkg com.android.systemui,2
55,logNotificationVisibilityChanges runInThread start,6
56,onNotificationVisibilityChanged called,6
57,logNotificationVisibilityChanges runInThread over,6
58,isSimPinSecure mSimDatas is null or empty,1
59,registerCallback not in UI.,3
60,android.util.AndroidRuntimeException: Must execute in UI,3
61,*** register callback for <*>,1
62,*** unregister callback for <*>,2
63,[PhoneIntfMgr] getDataEnabled: subId=<*> phoneId=<*>,1
64,[PhoneIntfMgr] getDataEnabled: subId=<*> retVal=<*>,1
65,"onInterceptTouchEvent MotionEvent { action=<*>, actionButton=<*>, id[<*>, x[<*>, y[<*>, toolType[<*>, buttonState=<*>, metaState=<*>, flags=<*>, edgeFlags=<*>, pointerCount=<*>, historySize=<*>, eventTime=<*>, downTime=<*>, deviceId=<*>, source=<*> }, mBlockTouches=false",4
66,playSoundEffect  effectType: <*>,10
67,"animateCollapsePanels:flags=<*>, force=<*>, delayed=<*>, mExpandedVisible=<*>",8
68,START u0 {act=<*> flg=<*> cmp=<*> (has extras)} from uid <*> on display <*>,1
69,"ActivityRecord info: ActivityInfo{<*> <*>}, euid: <*>",4
70,onNotificationClick called,2
71,"cancelNotification,index:<*>",23
72,"cancelNotification,cancelNotificationLocked,callingUid = <*>,callingPid = <*>",2
73,"cancelNotificationLocked called,tell the app,reason = <*>",2
74,cancelNotificationLocked:<*>,2
75,"cancelNotificationLocked,remove =<*>",2
76,applyOptionsLocked: Unknown animationType=<*>,2
77,"Taking screenshot from Surface with crop:[Rect(<*>, <*> - <*>, <*>)], width:[<*>], height:[<*>], minLayer:[<*>], maxLayer:[<*>], inRotation:[<*>], rot:[<*>]",4
78,removeNotification:<*>|com.tencent.mobileqq|<*>|null|<*>,2
79,"updateNotificationShade: total=<*>, active=<*>",13
80,The change in focus caused us to need to do a layout begin,6
81,The change in focus caused us to need to do a layout end,6
82,setLightsOn(<*>),181
83,removeNotificationChildren,12
84,"Skipping, withExcluded: false, tr.intent:Intent { flg=0x10804000 cmp=<*> bnds=[<*>] }",14
85,"Skipping, withExcluded: false, tr.intent:Intent { act=<*> flg=<*> cmp=<*> (has extras) }",21
86,"Skipping, withExcluded: false, tr.intent:Intent { flg=<*> cmp=<*> (has extras) }",21
87,"Skipping, withExcluded: false, tr.intent:Intent { act=<*> dat=<*> typ=<*> flg=<*> cmp=<*> (has extras) }",7
88,"getRecentTasks: num=<*>,flags=<*>,totalTasks=<*>",14
89,getRecentTasks: topActivity=ComponentInfo{<*>},14
90,"cancelNotificationWithTag pid <*>,uid = <*>,tag = <*>,pkg =<*>,id =<*>",20
91,makeExpandedInvisible: mExpandedVisible=<*>,4
92,closeQs,12
93,instantCollapse,9
94,getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output,37
95,isMusicActive...,12
96,"Start dump, calling from : pid=<*>, uid=<*>",1
97,setWiredDeviceConnectionState type: <*> state: <*>,2
98,"ActivityManagerService,attachApplication,callingPid = <*>",4
99,"acquire lock=<*>, flags=0x<*>, tag=""AudioMix"", name=<*>, ws=null, uid=<*>, pid=<*>",5
100,isBluetoothA2dpOn...,1
101,isBluetoothScoOn...,1
102,getLastAudibleStreamVolume treamType: <*>,9
103,getDevicesForStream streamType: <*>,2
104,cleanUpApplicationRecord -- <*>,6
105,"cleanUpApplicationRecordLocked, pid: <*>, restart: <*>",6
106,"cleanUpApplicationRecordLocked, reset pid: <*>, euid: <*>",6
107,stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=<*>,6
108,stopWifiDisplayScanLocked mWifiDisplayScanRequestCount=<*>,6
109,getMode...,1
110,setSpeakerphoneOn on:<*>,2
111,"sending alarm Alarm{<*> type <*> when <*> PendingIntent{<*>: PendingIntentRecord{<*> <*> broadcastIntent}}},repeatInterval = <*>listenerTag =<*>",5
112,Received <*> alarm; rescheduling,3
113,scheduleTimeTickEvent triggerAtTime = <*>,3
114,received broadcast android.intent.action.TIME_TICK,3
115,handleTimeUpdate,3
116,Killing <*> (adj <*>): empty for <*>,1
117,Unable to start service Intent { act=<*> cmp=<*> } U=<*>: not found,1
118,unregisterAudioFocusListener...,1
119,abandonAudioFocus,1
120,"[HSM] stayAwake false uid: <*>, pid: <*>",1
121,Pid:<*> MediaPlayer destructor,1
122,Process <*> (pid <*>) has died,1
123,Scheduling restart of crashed service <*> in <*>ms,1
124,"new Process app=ProcessRecord{<*> <*>}, name: <*>, euid: <*>",1
125,Start proc <*>:com.tencent.mobileqq:<*> for service com.tencent.mobileqq/cooperation.qzone.remote.logic.QzoneWebPluginProxyService,1
126,enqueueNotificationInternal: pkg=<*> id=<*> notification=Notification(pri=<*> contentView=null vibrate=[<*>] sound=null tick defaults=<*> flags=<*> color=<*> <*>vis=PRIVATE),2
127,enqueueNotificationInternal: n.getKey = <*>,2
128,getRingerMode...,3
129,addNotification key=<*>,2
130,mHeadsUpExistenceChangedRunnable,4
131,Marking notification as seen <*>|com.tencent.mobileqq|<*>|null|<*>,1
132,onNotificationExpansionChanged called,2
133,START u0 {act=<*> cat=[<*>] flg=<*> cmp=<*> bnds=[<*>]} from uid <*> on display <*>,2
134,"ACTIVITY check resid: com.example.android.notepad, size=<*>",2
135,getAllCellInfo is blocked by permission manager . callingPackage = <*>,3
136,getCellLocation is blocked by permission manager uid:<*> pid:<*>,1
137,isWiredHeadsetOn...,1
138,"setDataSource(<*>, <*>, <*>)",1
139,getStreamVolume treamType: <*>,1
140,"updateIsPoweredLocked: wasPowered=<*>, mIsPowered=<*>, oldPlugType=<*>, mPlugType=<*>, mBatteryLevel=<*>",1
141,received broadcast android.intent.action.BATTERY_CHANGED,1
142,ACTION_BATTERY_CHANGED AMP: <*>; Volt: <*>,1
143,updateChargingLocked: charging=<*>,1
144,"onReceive, action:android.intent.action.BATTERY_CHANGED",1
145,<*> pluggedType: <*>,2
146,ApStaDisabledState what=<*>,1
147,DefaultState what=<*>,1
148,RefreshBatteryInfo isBatteryLow: <*>,2
149,ChargingSpeed Wattage: <*> ST: <*> --> <*>,1
150,handleBatteryUpdate,1
151,Marking notification as seen <*>|com.tencent.mm|<*>,1
152,START u0 {flg=<*> cmp=<*> (has extras)} from uid <*> on display <*>,1
153,startActivity called from non-Activity context; forcing Intent.FLAG_ACTIVITY_NEW_TASK for: Intent { flg=0x<*> cmp=<*> (has extras) },1
